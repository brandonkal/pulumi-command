# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Cmd',
]

@pulumi.output_type
class Cmd(dict):
    """
    Command specification
    """
    def __init__(__self__, *,
                 command: Sequence[str],
                 environment: Optional[Mapping[str, str]] = None,
                 stdin: Optional[str] = None):
        """
        Command specification
        :param Sequence[str] command: Specifiy the command to run as an array of arguments
        :param str stdin: Pass the stdin to a command
        """
        pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if stdin is not None:
            pulumi.set(__self__, "stdin", stdin)

    @property
    @pulumi.getter
    def command(self) -> Sequence[str]:
        """
        Specifiy the command to run as an array of arguments
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def stdin(self) -> Optional[str]:
        """
        Pass the stdin to a command
        """
        return pulumi.get(self, "stdin")


