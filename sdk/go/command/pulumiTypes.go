// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package command

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Command specification
type Cmd struct {
	// Specifiy the command to run as an array of arguments
	Command     []string          `pulumi:"command"`
	Environment map[string]string `pulumi:"environment"`
	// Pass the stdin to a command
	Stdin *string `pulumi:"stdin"`
}

// CmdInput is an input type that accepts CmdArgs and CmdOutput values.
// You can construct a concrete instance of `CmdInput` via:
//
//          CmdArgs{...}
type CmdInput interface {
	pulumi.Input

	ToCmdOutput() CmdOutput
	ToCmdOutputWithContext(context.Context) CmdOutput
}

// Command specification
type CmdArgs struct {
	// Specifiy the command to run as an array of arguments
	Command     pulumi.StringArrayInput `pulumi:"command"`
	Environment pulumi.StringMapInput   `pulumi:"environment"`
	// Pass the stdin to a command
	Stdin pulumi.StringPtrInput `pulumi:"stdin"`
}

func (CmdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Cmd)(nil)).Elem()
}

func (i CmdArgs) ToCmdOutput() CmdOutput {
	return i.ToCmdOutputWithContext(context.Background())
}

func (i CmdArgs) ToCmdOutputWithContext(ctx context.Context) CmdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdOutput)
}

func (i CmdArgs) ToCmdPtrOutput() CmdPtrOutput {
	return i.ToCmdPtrOutputWithContext(context.Background())
}

func (i CmdArgs) ToCmdPtrOutputWithContext(ctx context.Context) CmdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdOutput).ToCmdPtrOutputWithContext(ctx)
}

// CmdPtrInput is an input type that accepts CmdArgs, CmdPtr and CmdPtrOutput values.
// You can construct a concrete instance of `CmdPtrInput` via:
//
//          CmdArgs{...}
//
//  or:
//
//          nil
type CmdPtrInput interface {
	pulumi.Input

	ToCmdPtrOutput() CmdPtrOutput
	ToCmdPtrOutputWithContext(context.Context) CmdPtrOutput
}

type cmdPtrType CmdArgs

func CmdPtr(v *CmdArgs) CmdPtrInput {
	return (*cmdPtrType)(v)
}

func (*cmdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Cmd)(nil)).Elem()
}

func (i *cmdPtrType) ToCmdPtrOutput() CmdPtrOutput {
	return i.ToCmdPtrOutputWithContext(context.Background())
}

func (i *cmdPtrType) ToCmdPtrOutputWithContext(ctx context.Context) CmdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CmdPtrOutput)
}

// Command specification
type CmdOutput struct{ *pulumi.OutputState }

func (CmdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Cmd)(nil)).Elem()
}

func (o CmdOutput) ToCmdOutput() CmdOutput {
	return o
}

func (o CmdOutput) ToCmdOutputWithContext(ctx context.Context) CmdOutput {
	return o
}

func (o CmdOutput) ToCmdPtrOutput() CmdPtrOutput {
	return o.ToCmdPtrOutputWithContext(context.Background())
}

func (o CmdOutput) ToCmdPtrOutputWithContext(ctx context.Context) CmdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Cmd) *Cmd {
		return &v
	}).(CmdPtrOutput)
}

// Specifiy the command to run as an array of arguments
func (o CmdOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Cmd) []string { return v.Command }).(pulumi.StringArrayOutput)
}

func (o CmdOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v Cmd) map[string]string { return v.Environment }).(pulumi.StringMapOutput)
}

// Pass the stdin to a command
func (o CmdOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Cmd) *string { return v.Stdin }).(pulumi.StringPtrOutput)
}

type CmdPtrOutput struct{ *pulumi.OutputState }

func (CmdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cmd)(nil)).Elem()
}

func (o CmdPtrOutput) ToCmdPtrOutput() CmdPtrOutput {
	return o
}

func (o CmdPtrOutput) ToCmdPtrOutputWithContext(ctx context.Context) CmdPtrOutput {
	return o
}

func (o CmdPtrOutput) Elem() CmdOutput {
	return o.ApplyT(func(v *Cmd) Cmd {
		if v != nil {
			return *v
		}
		var ret Cmd
		return ret
	}).(CmdOutput)
}

// Specifiy the command to run as an array of arguments
func (o CmdPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cmd) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

func (o CmdPtrOutput) Environment() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cmd) map[string]string {
		if v == nil {
			return nil
		}
		return v.Environment
	}).(pulumi.StringMapOutput)
}

// Pass the stdin to a command
func (o CmdPtrOutput) Stdin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cmd) *string {
		if v == nil {
			return nil
		}
		return v.Stdin
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CmdOutput{})
	pulumi.RegisterOutputType(CmdPtrOutput{})
}
