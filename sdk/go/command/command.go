// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package command

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Execute a Command and save it as a resource.
//
// Each command can be specified as an object or a convenience array. If only `create` is specified, `update` will use the create definition. The `compare` property will be JSON serialized with a hash saved in the state. This is useful to ensure update is run if dependendent resources change.
//
// An update will occur in these cases:
// 1. The `compare` hash or the `update` arguments change.
// 2. The specified `diff` command exits with an error.
type Command struct {
	pulumi.CustomResourceState

	Compare pulumi.StringPtrOutput `pulumi:"compare"`
	// Define a command to create a resource.
	Create CmdPtrOutput `pulumi:"create"`
	Delete CmdPtrOutput `pulumi:"delete"`
	// Specify a command to run to diff the resource.
	//
	// Exit 0 to run update.
	// Exit with a non-zero value or omit to disable update.
	// Hint: an easy method to always run update is to set diff to `['true']`
	Diff CmdPtrOutput `pulumi:"diff"`
	// Define a command to create read the resource.
	Read CmdPtrOutput `pulumi:"read"`
	// stderr of the command
	Stderr pulumi.StringPtrOutput `pulumi:"stderr"`
	// stdout of the command
	Stdout pulumi.StringPtrOutput `pulumi:"stdout"`
	// If unspecified, create definition will be used. Define to provide an alternate update command.
	Update CmdPtrOutput `pulumi:"update"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Create == nil {
		return nil, errors.New("invalid value for required argument 'Create'")
	}
	var resource Command
	err := ctx.RegisterResource("command:v1:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("command:v1:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
}

type CommandState struct {
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	// Define a command to create a resource.
	Create Cmd  `pulumi:"create"`
	Delete *Cmd `pulumi:"delete"`
	// Specify a command to run to diff the resource.
	//
	// Exit 0 to run update.
	// Exit with a non-zero value or omit to disable update.
	// Hint: an easy method to always run update is to set diff to `['true']`
	Diff *Cmd `pulumi:"diff"`
	// Define a command to create read the resource.
	Read *Cmd `pulumi:"read"`
	// If unspecified, create definition will be used. Define to provide an alternate update command.
	Update *Cmd `pulumi:"update"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	// Define a command to create a resource.
	Create CmdInput
	Delete CmdPtrInput
	// Specify a command to run to diff the resource.
	//
	// Exit 0 to run update.
	// Exit with a non-zero value or omit to disable update.
	// Hint: an easy method to always run update is to set diff to `['true']`
	Diff CmdPtrInput
	// Define a command to create read the resource.
	Read CmdPtrInput
	// If unspecified, create definition will be used. Define to provide an alternate update command.
	Update CmdPtrInput
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}

type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(ctx context.Context) CommandOutput
}

func (*Command) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil))
}

func (i *Command) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i *Command) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Command)(nil))
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CommandOutput{})
}
